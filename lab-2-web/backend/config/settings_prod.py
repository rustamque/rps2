# settings_prod.py

"""
# Документация для файла settings_prod.py.
# Краткое описание назначения файла.
Django settings for config project.

# Информация о том, как был сгенерирован файл.
Generated by 'django-admin startproject' using Django 4.2.7.

# Ссылки на документацию Django по настройкам проекта.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Импортируем модуль os для работы с переменными окружения.
import os

# Импортируем класс Path из модуля pathlib для работы с путями к файлам и директориям.
from pathlib import Path

# Базовые настройки путей проекта.
# ------------------------------------------------------------------------------
# BASE_DIR: Абсолютный путь к корневой директории проекта.
BASE_DIR = Path(__file__).resolve().parent.parent

# Настройки безопасности и отладки.
# ------------------------------------------------------------------------------
# SECRET_KEY: Секретный ключ Django, используемый для криптографических операций. 
# В production-режиме он должен быть уникальным и храниться в секрете.
# Получаем значение секретного ключа из переменной окружения 'DJANGO_SECRET_KEY'. 
# Если переменная не установлена, будет использовано значение None (небезопасно!).
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', None)

# DEBUG: Флаг, включающий режим отладки Django. 
# В production-режиме он должен быть отключен (False).
# Получаем значение флага DEBUG из переменной окружения 'DJANGO_DEBUG'. 
# Если переменная не установлена, будет использовано значение False.
DEBUG = os.environ.get('DJANGO_DEBUG', False)

# ALLOWED_HOSTS: Список хостов/доменов, которым разрешено запускать проект. 
# В production-режиме он должен содержать домен вашего сайта.
#  '*' означает разрешить все хосты (небезопасно в production!).
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Настройки приложений.
# ------------------------------------------------------------------------------
# INSTALLED_APPS: Список установленных приложений Django.
INSTALLED_APPS = [
    # Встроенные приложения Django.
    'django.contrib.admin',  # Админ-панель Django.
    'django.contrib.auth',  # Аутентификация пользователей.
    'django.contrib.contenttypes',  # Фреймворк для работы с типами контента.
    'django.contrib.sessions',  # Сессии пользователей.
    'django.contrib.messages',  # Система сообщений.
    'django.contrib.staticfiles',  # Управление статическими файлами.

    # Сторонние приложения (установленные с помощью pip).
    'rest_framework',  # Django REST Framework для создания API.
    'corsheaders',  # Обработка CORS-заголовков для междоменных запросов.

    # Ваши собственные приложения.
    'bucket.apps.BucketConfig',  # Приложение "bucket" вашего проекта.
]

# Настройки middleware.
# ------------------------------------------------------------------------------
# MIDDLEWARE: Список middleware-классов, которые обрабатывают каждый запрос/ответ Django.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Защита от некоторых уязвимостей безопасности.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Обработка сессий.
    'corsheaders.middleware.CorsMiddleware',  # Обработка CORS-заголовков.
    'django.middleware.common.CommonMiddleware',  # Базовый middleware Django.
    'django.middleware.csrf.CsrfViewMiddleware',  # Защита от CSRF-атак.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Аутентификация пользователей.
    'django.contrib.messages.middleware.MessageMiddleware',  # Система сообщений.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Защита от clickjacking-атак.
]

# Настройки URL-адресов.
# ------------------------------------------------------------------------------
# ROOT_URLCONF: Путь к модулю Python, содержащему корневой список URL-шаблонов проекта.
ROOT_URLCONF = 'config.urls'

# Настройки шаблонов.
# ------------------------------------------------------------------------------
# TEMPLATES: Список настроек для движка шаблонов Django.
TEMPLATES = [
    {
        # BACKEND: Класс бэкенда шаблонов. DjangoTemplates - стандартный бэкенд Django.
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS: Список путей к директориям, в которых Django будет искать шаблоны.
        'DIRS': [BASE_DIR / 'templates'],
        # APP_DIRS: Флаг, указывающий, что Django будет искать шаблоны в поддиректориях "templates" установленных приложений.
        'APP_DIRS': True,
        # OPTIONS: Дополнительные настройки движка шаблонов.
        'OPTIONS': {
            # context_processors: Список функций-обработчиков контекста, которые добавляют переменные в контекст шаблонов.
            'context_processors': [
                'django.template.context_processors.debug',  # Добавляет переменную DEBUG в контекст.
                'django.template.context_processors.request',  # Добавляет объект запроса (request) в контекст.
                'django.contrib.auth.context_processors.auth',  # Добавляет информацию об аутентифицированном пользователе.
                'django.contrib.messages.context_processors.messages',  # Добавляет системные сообщения.
            ],
        },
    },
]

# Настройки WSGI.
# ------------------------------------------------------------------------------
# WSGI_APPLICATION: Путь к WSGI-приложению Django, используемому для запуска проекта с WSGI-сервером.
WSGI_APPLICATION = 'config.wsgi.application'

# Настройки базы данных.
# ------------------------------------------------------------------------------
# DATABASES: Словарь настроек подключения к базам данных.
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': Настройки подключения к базе данных по умолчанию.
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Используем PostgreSQL в качестве СУБД.
        'NAME': os.environ.get('DJANGO_DB_NAME', 'bucket_db'),  # Имя базы данных (получаем из переменной окружения).
        'USER': os.environ.get('DJANGO_DB_USER', 'bucket_user'),  # Пользователь базы данных.
        'PASSWORD': os.environ.get('DJANGO_DB_PASSWORD', 'bucket_password'),  # Пароль пользователя базы данных.
        'HOST': os.environ.get('DJANGO_DB_HOST', 'db'),  # Хост базы данных.
        'PORT': os.environ.get('DJANGO_DB_PORT', '5432'),  # Порт базы данных.
    }
}

# Настройки валидации паролей.
# ------------------------------------------------------------------------------
# AUTH_PASSWORD_VALIDATORS: Список валидаторов паролей, используемых при создании и изменении паролей пользователей.
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Проверяет, не похож ли пароль на данные пользователя.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Проверяет минимальную длину пароля.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Проверяет, не является ли пароль слишком распространенным.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Проверяет, содержит ли пароль только цифры.
    },
]

# Настройки интернационализации.
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE: Код языка по умолчанию для сайта.
LANGUAGE_CODE = 'ru'

# TIME_ZONE: Часовой пояс по умолчанию для сайта.
TIME_ZONE = 'Europe/Moscow'

# USE_I18N: Флаг, включающий интернационализацию (перевод) Django.
USE_I18N = True

# USE_TZ: Флаг, включающий поддержку часовых поясов Django.
USE_TZ = True

# Настройки статических файлов.
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL: URL-префикс для обслуживания статических файлов.
STATIC_URL = 'static/'

# Настройки первичных ключей моделей.
# ------------------------------------------------------------------------------
# DEFAULT_AUTO_FIELD: Тип поля, используемого для автоинкрементных первичных ключей моделей.
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки CORS.
# ------------------------------------------------------------------------------
# CORS_ALLOW_ALL_ORIGINS: Флаг, разрешающий кросс-доменные запросы со всех источников.
#  В production-режиме рекомендуется указать конкретные домены, с которых разрешены запросы.
CORS_ALLOW_ALL_ORIGINS = True

# Настройки Django REST Framework.
# ------------------------------------------------------------------------------
# APPEND_SLASH: Флаг, указывающий, нужно ли автоматически добавлять слэш в конце URL-адресов API.
APPEND_SLASH = False

# REST_FRAMEWORK: Словарь настроек Django REST Framework.
REST_FRAMEWORK = {
    # DEFAULT_PAGINATION_CLASS: Класс пагинации по умолчанию для представлений API.
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # PAGE_SIZE: Количество объектов на странице при пагинации.
    'PAGE_SIZE': 50,
}