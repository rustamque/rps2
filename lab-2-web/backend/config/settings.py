"""
# Документация модуля settings.py
# Краткое описание файла настроек.
Django settings for config project.

# Информация о том, как был создан файл.
Generated by 'django-admin startproject' using Django 4.2.7.

# Ссылки на документацию Django по настройкам.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Импорты стандартных модулей Python.
import os
from pathlib import Path

# Определение BASE_DIR
# BASE_DIR - это путь к корневой директории проекта.
# Path(__file__).resolve().parent.parent - это способ получить путь к родительской директории файла settings.py.
BASE_DIR = Path(__file__).resolve().parent.parent


# Быстрые настройки разработки - не подходят для production.
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Предупреждение о безопасности: секретный ключ должен храниться в секрете в production!
# SECRET_KEY используется для криптографической подписи, поэтому его важно хранить в секрете.
# В production-среде используйте более надежный секретный ключ.
SECRET_KEY = "django-insecure-^drm=^we5*27!1qe+ku1quvh$c*lzy5w-^td&c=yn(_2-n9c#_"

# Предупреждение о безопасности: не запускайте проект с включенным DEBUG в production!
# DEBUG = True включает режим отладки, который отображает подробную информацию об ошибках в браузере.
# В production-среде установите DEBUG = False.
DEBUG = True

# Список разрешенных хостов.
# ALLOWED_HOSTS - это список хостов/доменов, которым разрешено запускать проект.
# '*' означает, что разрешены все хосты (только для разработки!).
# В production-среде укажите список разрешенных хостов.
ALLOWED_HOSTS = ["*"]


# Определение приложения

# Список установленных приложений.
# INSTALLED_APPS - это список всех установленных приложений Django, включая ваши собственные.
INSTALLED_APPS = [
    # Встроенные приложения Django
    "django.contrib.admin",  # Админ-панель Django
    "django.contrib.auth",  # Аутентификация пользователей
    "django.contrib.contenttypes",  # Система типов контента
    "django.contrib.sessions",  # Сессии пользователей
    "django.contrib.messages",  # Сообщения пользователей
    "django.contrib.staticfiles",  # Управление статическими файлами

    # Сторонние приложения
    "rest_framework",  # Django REST Framework
    "corsheaders",  # Django CORS Headers

    # Ваши приложения
    "bucket.apps.BucketConfig",  # Приложение 'bucket'
]

# Список промежуточного программного обеспечения (middleware).
# MIDDLEWARE - это список классов, которые перехватывают и обрабатывают запросы и ответы перед тем, как они достигнут представления.
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Обеспечивает базовые настройки безопасности.
    "django.contrib.sessions.middleware.SessionMiddleware",  # Управляет сессиями пользователей.
    "corsheaders.middleware.CorsMiddleware",  # Добавляет заголовки CORS (Cross-Origin Resource Sharing).
    "django.middleware.common.CommonMiddleware",  # Обрабатывает общие исключения и HTTP-заголовки.
    "django.middleware.csrf.CsrfViewMiddleware",  # Защита от CSRF-атак.
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Управляет аутентификацией пользователей.
    "django.contrib.messages.middleware.MessageMiddleware",  # Обрабатывает сообщения пользователей.
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Защита от clickjacking.
]

# Путь к корневому файлу URL-адресов проекта.
ROOT_URLCONF = "config.urls"

# Настройки шаблонов.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",  # Используемый бэкенд шаблонизатора.
        "DIRS": [BASE_DIR / "templates"],  # Список директорий, в которых Django будет искать шаблоны.
        "APP_DIRS": True,  # Включает поиск шаблонов в директориях 'templates' приложений.
        "OPTIONS": {
            "context_processors": [  # Список обработчиков контекста шаблонов.
                "django.template.context_processors.debug",  # Добавляет переменную 'debug' в контекст шаблона.
                "django.template.context_processors.request",  # Добавляет объект запроса 'request' в контекст шаблона.
                "django.contrib.auth.context_processors.auth",  # Добавляет информацию об аутентификации в контекст шаблона.
                "django.contrib.messages.context_processors.messages",  # Добавляет сообщения пользователей в контекст шаблона.
            ],
        },
    },
]

# Путь к WSGI-приложению проекта.
WSGI_APPLICATION = "config.wsgi.application"


# Настройки базы данных.
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {  # Настройки базы данных по умолчанию.
        "ENGINE": "django.db.backends.sqlite3",  # Используемый движок базы данных (SQLite3).
        "NAME": BASE_DIR / "db.sqlite3",  # Путь к файлу базы данных.
    }
}


# Валидаторы паролей.
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [  # Список валидаторов паролей.
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # Проверяет, похож ли пароль на имя пользователя.
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # Проверяет минимальную длину пароля.
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # Проверяет, не является ли пароль слишком распространенным.
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # Проверяет, содержит ли пароль только цифры.
    },
]


# Интернационализация
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ru"  # Язык по умолчанию (русский).

TIME_ZONE = "Europe/Moscow"  # Часовой пояс по умолчанию (Москва).

USE_I18N = True  # Включает поддержку интернационализации.

USE_TZ = True  # Включает поддержку часовых поясов.


# Статические файлы (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"  # URL-префикс для статических файлов.

# Тип поля для первичного ключа по умолчанию.
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"  # Тип поля для первичного ключа (BigAutoField).

# Настройки CORS.
# CORS_ALLOW_ALL_ORIGINS = True разрешает запросы с любых источников.
# В production-среде настройте CORS более строго, указав список разрешенных источников.
CORS_ALLOW_ALL_ORIGINS = True

# Настройки Django-REST.
# APPEND_SLASH = False отключает автоматическое добавление слеша (/) в конце URL-адресов.
APPEND_SLASH = False

# Настройки Django REST Framework.
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",  # Класс пагинации по умолчанию.
    "PAGE_SIZE": 50,  # Количество объектов на странице по умолчанию.
}